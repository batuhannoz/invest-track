@startuml
actor "User" as user
participant "Frontend" as frontend
participant "AuthController" as controller
participant "AuthService" as service
participant "JwtService" as jwt
database "Database" as db

title Authentication Flow Diagram

== Sign Up Process ==
user -> frontend: Enter registration details
frontend -> controller: POST /auth/signup
controller -> service: signup(RegisterUserRequest)
service -> db: save user
db --> service: return saved user
service --> controller: return User object
controller --> frontend: return User JSON
frontend --> user: Show success message

== Login Process ==
user -> frontend: Enter login credentials
frontend -> controller: POST /auth/login
controller -> service: authenticate(LoginUserRequest)
service -> db: find and authenticate user
db --> service: return authenticated user
service --> controller: return authenticated user
controller -> jwt: generateToken(authenticatedUser)
jwt --> controller: return access token
controller -> jwt: generateRefreshToken(authenticatedUser)
jwt --> controller: return refresh token
controller -> jwt: getExpirationTime()
jwt --> controller: return expiration time
controller --> frontend: return LoginResponse(accessToken, refreshToken, expiresIn)
frontend -> frontend: store both tokens
frontend --> user: Redirect to dashboard

== Protected Request Flow ==
user -> frontend: Access protected resource
frontend -> controller: Request with JWT header
note right: Authorization: Bearer <token>
controller -> jwt: validateToken(token)
jwt --> controller: token valid/invalid
alt Token Valid
    controller --> frontend: Return protected resource
else Token Invalid
    controller --> frontend: Return 401 Unauthorized
    frontend --> user: Redirect to login
end

== Refresh Token Process ==
user -> frontend: Access token expired
frontend -> controller: POST /auth/refresh
note right: Body: refreshToken
controller -> jwt: validateRefreshToken(refreshToken)
alt Refresh Token Valid
    controller -> jwt: generateNewAccessToken()
    jwt --> controller: return new access token
    controller -> jwt: getExpirationTime()
    jwt --> controller: return expiration time
    controller --> frontend: return LoginResponse(newAccessToken, expiresIn)
    frontend -> frontend: update access token
else Refresh Token Invalid or Expired
    controller --> frontend: Return 401 Unauthorized
    frontend --> user: Redirect to login
end

@enduml
